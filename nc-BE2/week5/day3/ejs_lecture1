# Introduction to Templating with EJS

## Recap

* Ask students to define the **process** object
* Ask students to explain what **process.env.NODE_ENV** is used for : why do we need to switch between different environments?
* Ask students to explain the best practice for setting up a config folder in their express project.

## Learning Objectives

Students should

* Be able to set up a views folder and set the express app for using ejs templates
* Understand the file structure for a project using ejs
* Be able to add data into their own ejs templates
* Be able to abstract out re-usable segments of html into a partials folder

## What are views?

So far we’ve built APIs, interfaces for other programs to interact with ours. But we also want actual users to consume our application and that’s where views come in.

Views are the “human” interface of our application, generally in the form of websites, mobile apps, desktop apps, etc.

Since the data in our applications is dynamic in nature, we need to generate our views in a dynamic way. We can’t just hard code HTML files. That’s where templating engines come in, they give us the ability to write templates (think of HTML documents with blanks to be filled in later) and efficiently populate them with data from our database.

For this example we’ll use the templating engine called [EJS](http://ejs.co/), but there are many other options to chose from. Express.js’ website has [a handy guide to get started with templating engines](https://expressjs.com/en/guide/using-template-engines.html), which we’ll be following and we encourage you to reference.

We’ll start with the film app setup from yesterday.

The first thing that we will need to do is install EJS and start using it in our app!

#### Terminal

`npm i express ejs`

Now let’s set up our app’s view engine.

The view engine is responsible for creating HTML from your views. Views are usually some kind of mixup of HTML and a programming language, in our case EJS files combine HTML and JavaScript using EJS tags (more on these later!).

#### `server.js`

```js
const app = require('express')();
app.set('view engine', 'ejs'); // +++
// ...
```

Note: no need to require in ejs, as we are not using it as a variable anywhere.

This line tells Express which templating engine to use and it will internally figure out how to use it (if it is in the dependencies of your project…)

Express, by default and reasonably, looks for templates in a root level directory named `views`, so let’s create it and write our first template:

#### `views/index.ejs`

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>My Express App</title>
</head>
<body>
  <h1>This is a template!</h1>
</body>
</html>
```

Now let’s make our endpoint render this view instead of manually responding with some HTML:

#### `server.js`

```js
const app = require('express')();
app.set('view engine', 'ejs');

app.get('/', (req, res) => {
  res.render('index');
});
//...
```

If you request your endpoint with a browser, you’ll see the exact HTML document we wrote on `index.ejs`. But this is a pretty boring template, it’s completely static. Let’s see how we can inject data dynamically into our templates.

## Injecting Data into our Templates

Let’s say we want to display our list of Pokemon and some data related to them (which we have stored in our database). A good idea is to start by hardcoding everything just to see what it will look like. After that we’ll turn data into blanks and inject it.

#### `views/films.ejs`

```html
// ...
<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta http-equiv="X-UA-Compatible" content="ie=edge">
        <title>Films</title>
        <link type='text/css' rel='stylesheet' href='/styles.css'/>
</head>
<body>
    <div>
        <h3>Films</h3>
            <h3>Film Title</h3>
            <img /> 
            <p> Stars </p>
    </div>
</body>
</html>
// ...
```

Now that we decided what it will look like we can start turning data points into blanks. In this case, we’ll make blanks for the name, job and age properties of our staff members. The way to make a “blank” in EJS is with `<%= key %>` syntax.

* <% 'Scriptlet' tag, for control-flow, no output
* <%_ ‘Whitespace Slurping’ Scriptlet tag, strips all whitespace before it
* <%= Outputs the value into the template (HTML escaped)
* <%- Outputs the unescaped value into the template
* <%# Comment tag, no execution, no output
* <%% Outputs a literal '<%'
* %> Plain ending tag
* -%> Trim-mode ('newline slurp') tag, trims following newline
* _%> ‘Whitespace Slurping’ ending tag, removes all whitespace after it

#### `views/films.ejs`

```html
    <div>
        <h3>Films</h3>
        <div class='film-container'>
        <% films.forEach(film => { %>
            <div class='film'>
                <h3><%= film.film_name %></h3>
                <img src= <%= film.poster_url %> class='film-poster'/>
                <p> <%= `${film.stars} Star${film.stars > 1 ? 's' : ''}` %> </p>
            </div>
        <% }) %>
        </div>
    </div>
```


All there’s left to do is make our controller function (the one calling `res.render()`) get the corresponding data and pass it as the second argument to `render`. In your project you’ll get this from the database, but for this example I’ll just use an object in memory:

#### `films.js` controller

```js
exports.sendAllFilms = (req, res, next) => {
  db.many('SELECT * FROM films;')
    .then(films => res.render('pages/films.ejs', { films }))
    .catch(next);
};
```

Notice how the key names of the object we passed to `render` match the key names of our template. This is how EJS matches them.

The ability of injecting data into our templates is already quite powerful, but what happens if we want to render more than one member of staff but we don’t know how many there are at any given point in time?

In JavaScript you would solve this by looping over an array of staff members and creating the markup for however many there are. EJS allows us to type JavaScript in between `<% %>` tags, so we could pass an array of pokemon and loop over it in our template itself!


## Using Partials to avoid repetition

Most websites and web applications share parts of their views across different pages. For example, our Pokemon box is basically the same for both end-points to far, as is the header.

EJS implements partials, which are equivalent to Node.js modules, which we can require into other modules/views.

Let’s make our `header` and nav partials by copying out the html from our `films.ejs` file

#### `views/partials/head.ejs`

```html
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Films</title>
    <link type='text/css' rel='stylesheet' href='/main.css'/>
</head>
```
#### `views/partials/nav.ejs`

```html
<nav>
    <a href='/' >Home</a> | <a href='/api/films'>Films</a>
</nav>
```


#### `views/film.ejs`

```html
<!DOCTYPE html>
<html lang="en">
    <%- include('../partials/head.ejs') %>
<body>
    <div>
        <%- include('../partials/nav.ejs') %>
        <h3>Films</h3>
        <div class='film-container'>
        <% films.forEach(film => { %>
            <div class='film'>
                <h3><%= film.film_name %></h3>
                <img src= <%= film.poster_url %> class='film-poster'/>
                <p> <%= `${film.stars} Star${film.stars > 1 ? 's' : ''}` %> </p>
            </div>
        <% }) %>
        </div>
    </div>
</body>
</html>
```

Your pages should look exactly the same as before, but now from the development point of view, our views are much easier to maintain and scale up.

---

And that’s it! We recommend you to reference the documentation for EJS to see what other features it has. Conditionals might be handy!

### EXTRA

#### SERVING STATIC FILES TO FORMAT VIEWS WITH CSS

```js
app.use(express.static('public'));
```

This will ensure that contents of the public folder (our CSS and any images!) are made available to our endpoints

```html
<link rel="stylesheet" type="text/css" media="screen" href="/main.css" />
```

Dont forget the `/` before `main.css`!!!

```css
.film-container {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    text-align: center;
    gap: 10px;
}

.film {
    border: 0.2px solid black;
    box-shadow: 5px 5px lightgray;
    height: 40vh;
}

.film:hover {
    background-color: rgb(242, 251, 253);
    cursor: pointer;
}

.film-poster {
    height: 70%;
}
```
