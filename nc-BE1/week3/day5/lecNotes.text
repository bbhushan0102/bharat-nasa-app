
We can use the http library to build a server up from scratch.
Firstly, we need to create the actual server itself :

```js
const server = http.createServer();
```

The `createServer` method takes a single argument which is a request,response handler - a function that gets called everytime the server receives a request.

```js
const server = http.createServer((request, response) => {
  console.log(req);
});
```

At the moment though, our server is looking out for requests from the client side: we need to make ensure that our server is **listening** for requests.

```js
const server = http.createServer((request, response) => {
  console.log(req);
});

server.listen(9090);
```

The `listen` method takes as its argument the PORT number on which the server should be listening for client requests.

Now we can start to build up logic to send out a response

```js
const server = http.createServer((request, response) => {
  response.setHeader('Content-Type', 'application/json');
  response.statusCode = 200;
  res.write(JSON.stringify('THE HOME PAGE'));
  res.end();
});

server.listen(9090);
```

We need to use `res.end()` otherwise the browser will still be hanging: the request won't have ended!

## REST APIs

* REST (Representational State Transfer) is an architectural style of designing APIs. It focuses on:
  * Correct use of HTTP CRUD methods
  * Being stateless (data not held on the server)
  * URLs clearly representing resources in our server (not actions)
  * Use of parameters
  * Idempotent GET requests: making the same request twice is the same as making it once. That's what enables caching.
  * Responses are Either JSON or XML format

## MVC Pattern

An architectural way of separating the concerns of our applications.

* Model: fundamental behaviour and data
* View: provides the interface of the application (HTML in our case)
* Controller: receives request and makes calls to the model and views to perform appropriate actions

---
