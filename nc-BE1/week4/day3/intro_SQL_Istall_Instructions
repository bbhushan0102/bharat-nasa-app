# Notes for the day

## 9.00am - 10.00am hour of self learning
Follow [this tutorial](https://sqlbolt.com/) completing stages 1-6 and 13-18. If you complete these sections with time to spare please feel free to work your way through sections 7-12.

## PSQL Install instructions

### Mac

- Install Postrgres App https://postgresapp.com/
  - Open the app (little blue elephant) and select initialize/start
- type `psql` into your terminal. You should then see something similar to:

```psql
psql (9.6.5, server 9.6.6)
Type "help" for help.

username=#
```

- if the above does not show/you get an error, run the following commands in your terminal:
  - `brew update`
  - `brew doctor`
  - `brew install postgresql`

### Ubuntu

- Run this command in your terminal:

    `sudo apt-get install postgresql postgresql-contrib`

- Next run the following commands to create a database user for Postgres.

    `sudo -u postgres createuser --superuser $USER`

    `sudo -u postgres createdb $USER`

- Then run this command to enter the terminal application for PostgreSQL:

    `psql`

- Now type:

    `ALTER USER username WITH PASSWORD 'mysecretword123';`

    __BUT__ Instead of `username` type your Ubuntu username and instead of `'mysecretword123'` choose your own password and be sure to wrap it in quotation marks. Use a simple password like 'password'. __DONT USE YOUR LOGIN PASSWORD__ !

- You can then exit out of psql by typing `\q`

## 1. SQL Introduction

SQL is a query language for interacting with a *__relational__* database (RDBMS: relational database management system). It stands for Structured Query Language.

We'll learn about 2 different types of DBs - explain brief difference between Relational and Non-relational.

### Relational vs. Non-Relational

_Relational:_

- it is built from a set of unique tables (also called relations)
- data stored in columns and rows (very structured)
- a table contains data about just one entity
- tables must have a primary key
- tables are linked by primary and foreign keys

_Non-relational:_

- for less structured data
- Everything is a document
- throw it in the database, doesn't matter if it looks the same as other data
- data usually structured like json - can even be nested
- can usually retrieve instantly by an id or some other key
- scales well

_Pros of Relational:_

- Pro: data is well organised and structured. Great for when you know what your data will look like and its inregrity is important. E.g. finance, retail, transaction systems
- Pro: no redundant (duplicate) data
- Pro: SQL is quite easy to learn in order to interact with the database
- Pro: Popular, has support expertise and tools.
- Pro: security is good, it's a mature technology compared to NoSQL

_Cons of Relational:_

- Con: not good for fluid data or where we might not know what it looks like
- Con: enterprise level SQL DBS can be very expensive
- Con: With v. complex data can be hard to retreive across many tables
- Con: Doesn't scale well: 'scaling horizontally' means adding extra machines, but this is hard when you have 100mil customers on a table and you need to add more customer on another machine. Very inefficient to have tables split across multiple machines. Need to pay a lot of money to scale horizontally or scale vertically (buy better hardware). FB trapped in 'SQL fate worse than death' due to inability to scale but managed to make it work

## 2. PSQL introduction

- Cover PSQL to run sql in CLI (psql)
- Note to students - Semi-colons are super important
- Note to students - Make sure you DROP, CREATE, and CONNECT to the database,

### Postgres commands

- \l - show databases
- \c northcoders_test - connect to db
- \dt - show tables
- \dt+ - show tables and more info

## 3. Creating a database and inserting into a table using the __psql CLI__

Let's create a new database, connect to it, create a couple of tables and then delete it

```sql
  DROP DATABASE IF EXISTS northcoders_test;
  CREATE DATABASE northcoders_test;
  \c northcoders_test
```

Lets create a table. What data types can we have?

- varchar
- char
- int/integer
- serial
- bool/boolean
- text
- date

```sql
  CREATE TABLE northcoders (id INT PRIMARY KEY, northcoder VARCHAR(40));
```

`\dt` - show table

```sql
  INSERT INTO northcoders (id, northcoder) VALUES (1, 'Mitch');
  INSERT INTO northcoders (id, northcoder) VALUES (2, 'Anat');
  INSERT INTO northcoders (id, northcoder) VALUES (3, 'Jac');

  SELECT * FROM northcoders;

  DROP TABLE northcoders;
```

### _Syntax is important!_

- What happens if we make a syntax error?

  `select * from northcoders'` Shows nothing

- but then:

  `select * from northcoders;` Shows syntax error because it is remembering prev command.

  `select * from northcoders;` And finally it works!

This is a little bit cumbersome though. What if we could auto increment the ID numbers, and insert multiple records at once?

To do this we need to use `SERIAL` instead of `INT`:

```sql
  CREATE TABLE northcoders (id SERIAL PRIMARY KEY, northcoder VARCHAR(40));
```

And comma separate the values that we are interting:

```sql
  INSERT INTO northcoders (northcoder) VALUES ('Mitch'), ('Anat'), ('Jac');

  SELECT * FROM northcoders;
```

## 4. Running a file with PSQL

We can also write all these commands into a file and then run them with psql so that we can reuse them.

- We can also get an output at the end if we finish with a select statement. So lets add a `spirit_animals` table and update our `northcoders` table to have a `spirit_animal_id` using a `FOREIGN KEY`.

_Note: We need to create the spirit_animals first because the northcoders table will have a foreign key which references a key in the spirit_animals table. So that table must already exist._

```sql
-- exmaple.sql
  DROP DATABASE IF EXISTS northcoders_test;
  CREATE DATABASE northcoders_test;
  
  \c northcoders_test

  CREATE TABLE spirit_animals
  (
    id SERIAL PRIMARY KEY,
    spirit_animal VARCHAR(40)
  );

  CREATE TABLE northcoders
  (
    id SERIAL PRIMARY KEY,
    northcoder VARCHAR(40),
    spirit_animal_id INT,
    FOREIGN KEY (spirit_animal_id) REFERENCES spirit_animals(id)
  );

  INSERT INTO spirit_animals
    (spirit_animal)
  VALUES
    ('Dragon'),
    ('Butterfly'),
    ('Reindeer'),
    ('Koala');

  INSERT INTO northcoders
    (northcoder, spirit_animal)
  VALUES
    ('Mitch', 3),
    ('Liz', 4),
    ('Jac', 1),
    ('Paul', 2);

  SELECT * FROM northcoders;
  SELECT * from spirit_animals;
```

*__Note: FOREIGN KEY format__*

```sql
spirit_animal_id INT,
FOREIGN KEY (spirit_animal_id) REFERENCES spirit_animals(id)
```

And then run either of the following:

- `psql -f example.sql` to print output to the *__terminal__*
- `psql -f example.sql > example.txt` to print output to an *__example.txt__* file

### _Naming conventions!_

There are some conventions we should bear in mind when naming tables and columns. Some people will have different opinions of course and some databases will preserve capitalisation and some won't, but here are some good conventions we'll stick to from now on for PostgreSQL:

- Name your primary keys using "[singularOfTableName]ID" format e.g. CustomerID. If your primary key is just ID it later can be programatically impossible to know what table this data came from.
- Foreign keys must be named consistently in different tables e.g AddressID, CohortID
- Capitalisation is considered ok, so are _ chars
- Table names plural
- Column names singular
- Fields representing the same kind of data on different tables should be named the same. E.g StudentUsername and StaffUsername are good, StudentUsername and StaffUser is not a good pair.
- Do not name columns with key words such as name, new, null etc. (see link at bottom)

## 5. Relationships

- __One-to-one__ (e.g. an address)
  - This is a situation where one thing will have or own another thing and that thing will only be owned by one person.
- __One-to-many__ (e.g. one shop can have many customers)
  - This is a situation where one thing will have or own many things but those things will only have one owner. E.g. a cohort has many students, but each student only has one cohort.
- __Many-to-many__ (e.g. many classes can be taken by many students)
  - This is a situation where one thing will have or own many things and those things can have one or more owner.

### *__Joins!__*

Joins basically let us join up two or more tables in whichever way that we decide.

There are many types of joins but we are just going to focus on the default join which is an inner join.

If you imagine 2 circles that overlap, the inner join will return the part that overlaps. So it will bring back everything that has a corresponding match with the table you are joining.

### One-to-many

Lets extend our example from earlier to include a `cohorts` table, for which each student belongs to a cohort (but a cohort can have many students).

Which table needs to be created first? Why?
The `northcoders` table cannot be created without the `cohorts` table, because the `northcoders` table relies on data from the `cohorts` table. Whilst the `cohorts` and `spirit_animals` tables do not directly rely on each other.
Again, we need to update the `northcoders` table.

```sql
-- exmaple.sql

-- ADD cohorts table
  
  CREATE TABLE cohorts
  (
    id SERIAL PRIMARY KEY,
    cohort_number int,
    cohort_date VARCHAR(40)
  );

  INSERT INTO cohorts
    (cohort_number, cohort_date)
  VALUES
    (6, 'August 2017'),
    (7, 'November 2017'),
    (8, 'February 2018');

-- UPDATE northcoders table:

  CREATE TABLE northcoders
  (
    id SERIAL PRIMARY KEY,
    northcoder VARCHAR(40),
    spirit_animal_id INT,
    FOREIGN KEY (spirit_animal_id) REFERENCES spirit_animals(id)
    cohort_id INT,
    FOREIGN KEY (cohort_id) REFERENCES cohorts(id)
  );

  INSERT INTO northcoders
    (northcoder, spirit_animal_id, cohort_id)
  VALUES
    ('Mitch', 3),
    ('Liz', 4),
    ('Jac', 1),
    ('Paul', 2);

  SELECT * FROM northcoders;
  SELECT * from cohorts;

```

So in our case - we want to have all the information about a student and their cohort - we need to join our two tables.

What do we have that we can join these two tables, i.e. what about these two tables do they share?
...The cohort ID!

```sql
  SELECT * FROM northcoders
  JOIN cohorts ON northcoders.cohort_id = cohorts.id;
```

What if we don't want everything? Also, we currently have two columns called `id` which might be confusing. We can just bring back what we want by specifying the column names in our `SELECT` statement:

```sql
  SELECT northcoder, cohort_number, cohort_date FROM northcoders
  JOIN cohorts ON northcoders.cohort_id = cohorts.id;
```

We can also use `WHERE` to select only records which meet a certain criteria:

```sql
  SELECT northcoder, cohort_number, cohort_date FROM northcoders
  JOIN cohorts ON northcoders.cohort_id = cohorts.id
  WHERE norhcoder = 'Mitch';
```

### Many-to-many

Let's imagine we want to add skills to our example.

- What do we think about the relation?
- Can one person have many skills?
- Can one skill have many people 'master' it?
- Do we want to be able to easily ask who has specific skills, and what skills does a specific person have?

Yes - so it's a many-to-many relationship.

Let's start by creating a Schema for a `skills` table:

``` sql
-- ADD skills table
CREATE TABLE skills
(
    id SERIAL PRIMARY KEY,
    skill VARCHAR(40),
    difficulty VARCHAR(40),
);

INSERT INTO skills
  (skill, difficulty)
VALUES
  ('Chess', 7),
  ('Eating', 3),
  ('Sitting', 2),
  ('Sleeping', 1),
  ('Jacascript', 6),
  ('HTML', 3),
  ('CSS', 10)
```

A northcoder could have many skills, so could we add a skills field to the northcoders table? Should we drop the students table and re-create it with a `skill_id` column?

The better way would be to introduce a table that would let us match up northcoders and skills. This is called a junction table. This way we need just 1 student and 1 skill in each of their respective tables but the smaller junction table can provide all the information about the many-to-many relationships.

```sql
-- ADD nc_skills table
CREATE TABLE nc_skills (
    id SERIAL PRIMARY KEY,
    northcoder_id INTEGER,
    skill_id INTEGER,
    FOREIGN KEY (northcoder_id) REFERENCES northcoders(id),
    FOREIGN KEY (skill_id) REFERENCES skills(id)
);

INSERT INTO nc_skills
  (northcoder_id, skill_id)
VALUES
  (1,1), (1,4), (1,7), (1,6), (2,5), (2,2), (2,1), (3,3), (3,1), (3,4), (4,5), (4,4), (4,7);

SELECT * FROM nc_skills;
```

This table lets have multiple entries and match up a single northcoder entry with a single skill entry.
If i need to update a skill, I can update one place.
If I need to update a student, I can update one place.

BUT the data from the `SELECT` query isnt very easy to interpret on its own. Time for some more `JOINS`!

How can we do this now that it is a junction table?

```sql
  SELECT * FROM nc_skills
  JOIN northcoders ON nc_skills.northcoder_id = northcoders.id
  JOIN skills ON nc_skills.skill_id = skills.id;
```

Again we can `select` what we need and use `where` to select on a certain requirement.

```sql
  SELECT northcoder, skill, difficulty FROM nc_skills
  JOIN northcoders ON nc_skills.northcoder_id = northcoders.id
  JOIN skills ON nc_skills.skill_id = skills.id
  WHERE northcoders.name = 'Mitch';
```

## Summary

We need to be aware and think of the relationships of our data. By having seperate tables and using the ids to reference other parts of the data, we normalise it. Normalised means basically that we keep one source of truth. One place that contains all the required information that we may need to update/change and others.

There is a lot more to SQL than just this and it can even be a specialism for some so don't feel like you need to know it all but its still an important part of the process that we need to, at a very minimum, be able to understand and design to a reasonable level (i.e. Facebook won't be hiring you to handle their data).

## Resources

A nice overview of joins can be found [here](https://stackoverflow.com/questions/38549/what-is-the-difference-between-inner-join-and-outer-join)

Another good tutorial site that goes into more than just the basics is [here](https://www.pgexercises.com/questions/basic/)

SQL Reserved Words [here](https://www.drupal.org/node/141051)
