## Error Handling

Express makes error handling really easy to. Again, because express is just a chain of middleware functions, our controllers are invoked with req, res and next.

So in the case of an error, we can call `next(err)` and this will tell express to pass along the error to an error handling function.

What seperates an express error handling function from a normal middleware function is that it will have 4 paramaters, error first. `err, req, res, next`.

So this means we can share error handling across more routes, saving duplicated code.

For example, let's look at GET request for an owner by id. We might be tempted to write it like this:

```js
router.get('/api/owners/:id', function(req, res, next) {
  const ownerPath = path.join(__dirname, '..', 'data', 'owners', req.params.id);
  fs.readFile(ownerPath, (err, owner) => {
    if (err && err.code === 252) {
      return res.status(404).send({ message: 'User does not exist' });
    }
    if (err) {
      return res.status(500).send({ message: 'Ohhhh noes' });
    }
    return res.send({ owner: owner });
  });
});
```

We can change this function to use `next` to pass the error along

```js
router.get('/api/owners/:id', function(req, res, next) {
  const ownerPath = path.join(__dirname, '..', 'data', 'owners', req.params.id);
  fs.readFile(ownerPath, (err, owner) => {
    if (err && err.code === 252) {
      return next({
        type: 'File not found',
        message: 'The owner does not exist'
      });
    }
    if (err) {
      return next({ type: 'Server Error', message: 'Ohhhh noes' });
    }
    return res.send({ owner: owner });
  });
});
```

In our index.js file, we could then add some error handlers

```js
// Notice that there are 4 params. There must be 4!!
app.use(function(err, req, res, next) {
  res.status(500).send({ message: 'Server Error' });
});
```

Now its responding but it's not very useful as it is not able to distinguish between different types of errors

```js
// Notice that there are 4 params. There must be 4!!
app.use(function(err, req, res, next) {
  if (err.type === 'FILE_NOT_FOUND') {
    return res.status(500).send({ message: err.message });
  }
});
```

Now it's better but it will only be able to find specific errors. We can use next to pass error along error handling middleware functions.

I.e.

```js
// Notice that there are 4 params. There must be 4!!
app.use(function(err, req, res, next) {
  if (err.type === 'FILE_NOT_FOUND') {
    return res.status(422).send({ message: err.message });
  }
});

app.use(function(err, req, res, next) {
  if (err.type === 'SERVER_ERROR') {
    return res.status(500).send({ message: err.message });
  }
});
```
