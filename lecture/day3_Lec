# Value vs Ref

## Data types

The latest ECMAScript standard defines seven data types:
Values can be partitioned into two main kinds: primitives and objects.

Seven data types, 6 are what we call primitive;
    **primitives**:
        - Boolean
        - Null
        - Undefined
        - Number
        - String
        - Symbol (new in ECMAScript 6) 


### Primitives are immutable;
Here I am using let to demostrate that the write command is not being ignored because of my variable declaration but because of the data type itself
```
let fruit = 'banana';
fruit.age = 28; // write - ignored
console.log(fruit.age) // read - undefined

let babyFruit = 'banana'
babyFruit[0] = 'n'; // write - ignored
console.log(babyFruit); // read - 'banana'
```

### Primitives are compared by value

To compare primitives, JS looks at their content. If the content(values) are the same, then they are considered equal.

```
'hello' === 'hello'
'hi' === 'hello'
true === false
undefined === null
```

For primitives, variables contain the value which means that when you copy one variable into the other, it will create a copy of the content/ the **value**

```
const a = 'woo'
const b = 'foo'
```

```
a === b

let a = 'jellyMountain';
let b = a;
a = 'peanutButter';
```

what does a equal?
what does b equal?

Show on board

```
let a = 10;
let b = a;
a = a * 2;
```

what does a equal?
what does b equal?

Show on board

## Object data types

Objects can be partitioned further:

    - Creatable by literals. The following literals produce objects that can also be created via constructor. Use literals whenever you can.
        - [] is the same as new Array()
        - {} is the same as new Object()
        - function() {} is the same as new Function()

### Objects are mutable by default:
    var me = {name: 'Sam'};
    me.age = 29; // write
    console.log(me.age) // read

### Objects are compared by reference

For objects (including arrays and functions), JS stores a reference to where the object is stored in memory.

Every object you create via an expression such as a constructor or a literal is considered different from every other object; a fact that can be observed via the equality operator (===). That operator compares objects by reference: two objects are only equal if they have the same identity. It does not matter whether they have the same content or not.

So when we create an object and store it in one variable and then we copy that variable into a new variable, it doesn't copy the value like it did with primitives. Instead it copies the reference. The pointer to where the object is being stored in memory.

i.e. 

const a = {name: 'Sam'}
b = a;
a.age = 29;

What does a equal?
what does b equal?

Why?
Does a === b?

a points to an object and b points to the same obj so if a changes so does b.

It does because they point to the same object. For 2 variables containing objects to be equal, they must be pointing to the same object.

Different objects containing same info

const a = {name: 'Daryl'}
const b = {name: 'Daryl};
a.age = 28;

What does a equal?
What does b equal?
Does a === b?

Why?

This creates two seperate objects in memory and therefore are not the same as to be equal must point to the same object.

## Arrays

const a = [1, 2, 3];
b = a;
a === b?


const  a = [1, 2, 3];
b = [1, 2, 3];
a === b?


As arrays are a type of object, it works the same way as an object.

## Copying an object without copying its reference

I can create a new array, with a new reference and modify it without modifying the original by using slice.

eg. 

```js
const people = ['Sam', 'Mauro', 'Harriet', 'Mitch', 'Jonny']

const tutors = people.slice()
```

## Testing

If your function returns an array and you need to test contents of that array whats going to happen here
```js
expect(dnaPairs('a')).to.equal([['A','T']])
```
Its going to fail because the reference of the array created inside dnaPairs will be different to the array literal declared in the expect statement, 
In these situations DEEP EQUAL (eql) will check the value or contents of your object type instead of checking the reference!


## Reading 

- http://2ality.com/2011/03/javascript-values-not-everything-is.html

